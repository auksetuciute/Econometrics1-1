curve(SMA(x,n=3), axes=FALSE, ylab='', xlab='', add=T)
curve(SMA(x,n=3), add=T)
curve(SMA(x,n=3), add=T)
curve(SMA(x,n=3), add=T)
curve(SMA(x,n=3), add=T)
curve(SMA(x,n=3), add=T)
points(SMA(x,n=3), add=T)
lines(SMA(x[,2],n=3))
points(SMA(x,n=3), add=T)
points(SMA(x,n=3), add=T)
points(SMA(x,n=3), add=T)
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='')
lines(SMA(x[,2],n=3))
?par
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
par(xaxs="i",yaxs="i", new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='')
lines(SMA(x[,2],n=3))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='')
lines(SMA(x[,2],n=3))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', range=x[,2])
lines(SMA(x[,2],n=3))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', ylim=range=x[,2])
lines(SMA(x[,2],n=3))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', ylim=range(x[,2]))
lines(SMA(x[,2],n=3))
SMA(x[,2],n=3)
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=4), axes=FALSE, ylab='', xlab='', ylim=range(x[,2]))
lines(SMA(x[,2],n=4))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', ylim=range(x[,2]))
lines(SMA(x[,2],n=3))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', ylim=range(x[,2]), col='red')
lines(SMA(x[,2],n=3))
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', ylim=range(x[,2]), col='red')
lines(SMA(x[,2],n=3),col='red')
win.metafile(file='emigrantuskaicius.wmf')
plot(x, ylab='Emigrantų skaičius', main='Iš Lietuvos išvykusių asmenų skaičius 2001-2015 metais')
lines(x)
grid()
library(TTR)
par(new=TRUE)
plot(SMA(x[,2],n=3), axes=FALSE, ylab='', xlab='', ylim=range(x[,2]), col='red')
lines(SMA(x[,2],n=3),col='red')
dev.off()
x=read.csv('C:/Users/Simute/Desktop/poriniaisteb.csv')
x
plot(x)
plot(x[,2], x[,3])
plot(x[,2], x[,3], xlab='Benzino kainos', ylab='Dyzelino kainos', main='Benzino ir dyzelino kainos įvairiose valstybėse')
grid()
win.metafile(file='kainos.wmf')
plot(x[,2], x[,3], xlab='Benzino kainos', ylab='Dyzelino kainos', main='Benzino ir dyzelino kainos įvairiose valstybėse')
grid()
dev.off()
?subset
subset(x, max(abs(x[,2]-x[,3])))
subset(x, (abs(x[,2]-x[,3]))>0,1)
subset(x, x[,2]>x[,3])
subset(x, x[,2]-x[,3]>0,1)
subset(x, x[,2]-x[,3]>0,5)
subset(x, x[,2]>x[,3])
subset(x, x[,2]<x[,3])
subset(x, x[,2]<x[,3])
?rep
subset(x, rep(1:5))
subset(x, rep(1:5), by=x[,2]-x[,3])
?rep
x=read.csv('C:/Users/Simute/Desktop/poriniaisteb.csv')
x
x[,2]-x[,3]
abs(x[,2]-x[,3])
y<-abs(x[,2]-x[,3])
cbind(x,y)
z<-cbind(x,y)
sort(z, z[,5])
?sort
z[order(z$y)]
z[order(z$y),]
z[order(z$y, decreasing=TRUE),]
subset(z, rep(1:2,each=8))
subset(z, Z$y>0.15)
subset(z, Z$y>0.15)
subset(z, Z$y>mean(z$y))
x=read.csv('C:/Users/Simute/Desktop/poriniaisteb.csv')
x
y<-abs(x[,2]-x[,3])
y
z<-cbind(x,y)
z
subset(z, Z$y>0.15)
subset(z, z$y>0.15)
x=read.csv('C:/Users/Simute/Desktop/poriniaisteb.csv')
x
Skirtumas<-abs(x[,2]-x[,3])
z<-cbind(x,Skirtumas)
subset(z, z$Skirtumas>0.15)
x=read.csv('C:/Users/Simute/Desktop/poriniaisteb.csv')
x
x=read.csv('C:/Users/Simute/Desktop/emigrantai.csv')
x
install.packages(c('swirl', 'base64enc'))
library("swirl")
install_course_github("1vbutkus", "R_Programming")
swirl()
2+2
swirl()
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
library('swirl')
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args()
args(list.files)
old.dir<-getwd()
?dir.create
testdir<-dir.create()
testdir<-dir.create(getwd)
testdir<-dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
?file.path
file.path("mytest3.R")
file.path(folder1, folder2)
file.path('folder1', 'folder2')
?dir.create
dir.create("testdir2", recursive=TRUE,file.path("testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
unlink('testdir')
unlink("testdir", recursive = TRUE)
getwd()
ls()
info()
main()
x
getwd()
ls()
?unplug()
getwd()
ls()
clear()
library('swirl')
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files())
args(list.files)
old.dir<-getwd()
dir.create("test.dir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
setwd(old.dir)
unlink('testdir', recursive=TRUE)
library('swirl')
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(cnames)
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, False)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
reainder(4, div=2)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Just", "testing", "my", "function")
submit()
mad_libs(place="Vilnius", adjective="beautiful", noun="pencil")
submit()
"I" %p% "love" %p% "R!"
library('swirl')
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<-sample(c(0, 1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2<-rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01"")
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
exit()
info()
bye()
library('swirl')
swirl()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time()-t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
install.packages('tm')
library(tm)
library('tm')
library('tm')
package('tm')
library('tm')
install.packages('tm')
library('tm')
install.packages('slam')
install.packages('slam')
install.packages('tm')
library('tm')
setwd(‘D:\Econometrics1\task3’)
setwd('D:\Econometrics1\task3')
setwd('D:\\Econometrics1\task3')
setwd('D://Econometrics1/task3')
reviews <- read.csv ("reviews.csv", stringsAsFactors=FALSE)
str(reviews)
review_text <- paste(reviews$text, collapse=" ")
review_source <- VectorSource(review_text)
corpus <- Corpus(review_source)
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, removeWords, stopwords(“english”))
corpus <- tm_map(corpus, removeWords, stopwords('english'))
dtm <- DocumentTermMatrix(corpus)
dtm2 <- as.matrix(dtm)
frequency <- colSums(dtm2)
frequency <- sort(frequency, decreasing=TRUE)
head(frequency)
install.packages('wordcloud')
library('wordcloud')
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library('wordcloud')
library('RColorBrewer')
library('wordcloud')
words <- names(frequenc
words <- names(frequency)
words <- names(frequency)
wordcloud(words[1:100], frequency[1:100])
wordcloud(words[1:50], frequency[1:50])
wordcloud(words[1:100], frequency[1:100])
